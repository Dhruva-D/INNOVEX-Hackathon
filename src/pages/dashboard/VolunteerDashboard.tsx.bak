import React, { useState } from 'react';
import { MapPin, Clock, ChevronDown, Check, X, Bell, Menu, User, LogOut, Sun, Moon, Home, Navigation, ArrowRight } from 'lucide-react';
import { motion, AnimatePresence } from 'framer-motion';
import { Link, useNavigate } from 'react-router-dom';

const VolunteerDashboard: React.FC = () => {
  // State management
  const [isAvailable, setIsAvailable] = useState(false);
  const [showNotification, setShowNotification] = useState(false);
  const [currentLocation, setCurrentLocation] = useState('');
  const [destinations, setDestinations] = useState<string[]>([]);
  const [newDestination, setNewDestination] = useState('');
  const [isDarkMode, setIsDarkMode] = useState(false);
  const [isDropdownOpen, setIsDropdownOpen] = useState(false);
  const [formSubmitted, setFormSubmitted] = useState(false);
  
  // Navigation
  const navigate = useNavigate();

  // Initialize theme preference from localStorage or system preference
  React.useEffect(() => {
    const savedTheme = localStorage.getItem('theme');
    if (savedTheme) {
      setIsDarkMode(savedTheme === 'dark');
      document.documentElement.setAttribute('data-theme', savedTheme);
    } else {
      const prefersDark = window.matchMedia('(prefers-color-scheme: dark)').matches;
      setIsDarkMode(prefersDark);
      document.documentElement.setAttribute('data-theme', prefersDark ? 'dark' : 'light');
    }
  }, []);

  // Toggle theme function
  const toggleTheme = () => {
    const newTheme = isDarkMode ? 'light' : 'dark';
    setIsDarkMode(!isDarkMode);
    document.documentElement.setAttribute('data-theme', newTheme);
    localStorage.setItem('theme', newTheme);
  };

  // Add a new destination to the list
  const addDestination = () => {
    if (newDestination.trim()) {
      setDestinations([...destinations, newDestination.trim()]);
      setNewDestination('');
    }
  };

  // Remove a destination from the list
  const removeDestination = (index: number) => {
    setDestinations(destinations.filter((_, i) => i !== index));
  };

  // Handle submission
  const handleSubmit = (e: React.FormEvent) => {
    e.preventDefault();
    setShowNotification(true);
    setFormSubmitted(true);
    
    // Hide notification after 5 seconds
    setTimeout(() => {
      setShowNotification(false);
    }, 5000);
  };

  // Dummy upcoming delivery data
  const upcomingDelivery = {
    id: "DEL12345",
    pickup: "Whitefield, Bangalore",
    dropoff: "Nagarbhavi, Bangalore",
    distance: "18.5 km",
    estimatedTime: "45 mins",
    items: "3 food packages"
  };

  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900 transition-all duration-300">
      {/* Navbar */}
      <header className="bg-white dark:bg-gray-800 shadow-sm sticky top-0 z-50">
        <div className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8">
          <div className="flex justify-between h-16 items-center">
            <div className="flex items-center">
              <Link to="/" className="flex items-center">
                <Bell className="h-8 w-8 text-green-600 dark:text-green-500" />
                <span className="ml-2 text-xl font-bold text-gray-900 dark:text-white">FoodShare</span>
              </Link>
            </div>
            <div className="flex items-center space-x-4">
              {/* Home Link */}
              <Link 
                to="/dashboard/volunteer" 
                className="flex items-center text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
              >
                <Home className="h-5 w-5 mr-1" />
                <span>Home</span>
              </Link>
              
              {/* Theme Toggle Button */}
              <button
                onClick={toggleTheme}
                className="p-2 rounded-full bg-gray-100 dark:bg-gray-700 text-gray-700 dark:text-gray-100 hover:bg-gray-200 dark:hover:bg-gray-600 transition-all duration-300 transform hover:scale-110"
                aria-label={`Switch to ${isDarkMode ? 'light' : 'dark'} mode`}
              >
                {isDarkMode ? (
                  <Sun className="h-5 w-5" />
                ) : (
                  <Moon className="h-5 w-5" />
                )}
              </button>
              
              {/* User Profile Dropdown */}
              <div className="relative">
                <button 
                  onClick={() => setIsDropdownOpen(!isDropdownOpen)}
                  className="flex items-center text-gray-600 dark:text-gray-300 hover:text-gray-900 dark:hover:text-white"
                >
                  <User className="h-5 w-5 mr-1" />
                  <span className="mr-1">Alex Johnson</span>
                  <span className="text-sm text-gray-500">(Volunteer)</span>
                  <ChevronDown className="h-4 w-4 ml-1" />
                </button>
                
                {/* Dropdown Menu */}
                {isDropdownOpen && (
                  <div className="absolute right-0 mt-2 w-48 rounded-md shadow-lg bg-white dark:bg-gray-800 ring-1 ring-black ring-opacity-5 z-10">
                    <div className="py-1" role="menu" aria-orientation="vertical" aria-labelledby="options-menu">
                      <Link
                        to="/dashboard/volunteer"
                        className="flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
                        role="menuitem"
                        onClick={() => setIsDropdownOpen(false)}
                      >
                        <Home className="mr-2 h-4 w-4" /> Home
                      </Link>
                      <Link
                        to="/admin-dashboard/volunteer"
                        className="flex items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
                        role="menuitem"
                        onClick={() => setIsDropdownOpen(false)}
                      >
                        <Menu className="mr-2 h-4 w-4" /> Dashboard
                      </Link>
                      <button
                        onClick={() => {
                          setIsDropdownOpen(false);
                          navigate('/');
                        }}
                        className="flex w-full items-center px-4 py-2 text-sm text-gray-700 dark:text-gray-300 hover:bg-gray-100 dark:hover:bg-gray-700"
                        role="menuitem"
                      >
                        <LogOut className="mr-2 h-4 w-4" /> Sign Out
                      </button>
                    </div>
                  </div>
                )}
              </div>
            </div>
          </div>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto px-4 sm:px-6 lg:px-8 py-8">
        {/* Hero Section */}
        <div className="w-full bg-gradient-to-r from-green-500 to-emerald-600 text-white rounded-2xl p-8 mb-8">
          <div className="flex flex-col items-center text-center">
            <h1 className="text-3xl font-bold mb-4">Volunteer Portal</h1>
            <p className="max-w-2xl mb-6">
              Help connect donors with those in need by delivering food donations. 
              Toggle your availability below and enter your current location to start.
            </p>
            
            {/* Availability Toggle */}
            <div className="flex items-center justify-center mt-2">
              <span className="mr-3 text-sm font-medium text-white">
                {isAvailable ? "You're Available" : "You're Unavailable"}
              </span>
              <button 
                onClick={() => setIsAvailable(!isAvailable)} 
                className={`
                  relative inline-flex h-6 w-11 flex-shrink-0 cursor-pointer rounded-full border-2 border-transparent
                  transition-colors duration-200 ease-in-out focus:outline-none
                  ${isAvailable ? 'bg-green-300' : 'bg-gray-200 dark:bg-gray-700'}
                `}
              >
                <span
                  className={`
                    pointer-events-none inline-block h-5 w-5 transform rounded-full 
                    bg-white shadow ring-0 transition duration-200 ease
                    ${isAvailable ? 'translate-x-5' : 'translate-x-0'}
                  `}
                />
              </button>
            </div>
          </div>
        </div>

        {/* Location Form */}
        <form onSubmit={handleSubmit} className="bg-white dark:bg-gray-800 rounded-xl shadow-sm p-6 mb-8">
          <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-6">
            Set Your Delivery Information
          </h2>
          
          {/* Current Location */}
          <div className="mb-6">
            <label htmlFor="currentLocation" className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Current Location
            </label>
            <div className="relative">
              <MapPin className="absolute top-3 left-3 h-5 w-5 text-gray-400" />
              <input
                type="text"
                id="currentLocation"
                value={currentLocation}
                onChange={(e) => setCurrentLocation(e.target.value)}
                placeholder="Enter your current location"
                className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 dark:bg-gray-700 dark:text-white"
                required
              />
            </div>
          </div>
          
          {/* Destinations Section */}
          <div className="mb-6">
            <label className="block text-sm font-medium text-gray-700 dark:text-gray-300 mb-2">
              Areas You Can Deliver To
            </label>
            
            {/* Add new destination */}
            <div className="flex mb-3">
              <div className="relative flex-grow">
                <MapPin className="absolute top-3 left-3 h-5 w-5 text-gray-400" />
                <input
                  type="text"
                  value={newDestination}
                  onChange={(e) => setNewDestination(e.target.value)}
                  placeholder="Add a location you can deliver to"
                  className="w-full pl-10 pr-4 py-2 border border-gray-300 dark:border-gray-600 rounded-l-lg focus:ring-2 focus:ring-green-500 focus:border-green-500 dark:bg-gray-700 dark:text-white"
                />
              </div>
              <button
                type="button"
                onClick={addDestination}
                className="px-4 py-2 bg-green-600 text-white rounded-r-lg hover:bg-green-700 transition-colors"
              >
                Add
              </button>
            </div>
            
            {/* Destination list */}
            <div className="space-y-2">
              {destinations.length === 0 ? (
                <p className="text-sm text-gray-500 dark:text-gray-400 italic">
                  Add locations where you're willing to deliver food
                </p>
              ) : (
                destinations.map((destination, index) => (
                  <div 
                    key={index}
                    className="flex items-center justify-between p-3 bg-gray-50 dark:bg-gray-700 rounded-lg"
                  >
                    <div className="flex items-center">
                      <MapPin className="h-4 w-4 text-green-500 mr-2" />
                      <span className="text-gray-700 dark:text-gray-300">{destination}</span>
                    </div>
                    <button
                      type="button"
                      onClick={() => removeDestination(index)}
                      className="text-gray-400 hover:text-red-500"
                    >
                      <X className="h-4 w-4" />
                    </button>
                  </div>
                ))
              )}
            </div>
          </div>
          
          {/* Submit Button */}
          <button
            type="submit"
            disabled={!isAvailable}
            className={`
              w-full py-3 rounded-lg font-medium transition-colors
              flex items-center justify-center
              ${isAvailable 
                ? 'bg-green-600 hover:bg-green-700 text-white' 
                : 'bg-gray-200 dark:bg-gray-700 text-gray-500 dark:text-gray-400 cursor-not-allowed'}
            `}
          >
            {isAvailable ? (
              <>Update Availability <Check className="ml-2 h-5 w-5" /></>
            ) : (
              <>Toggle Availability to Continue <X className="ml-2 h-5 w-5" /></>
            )}
          </button>
          
          {!isAvailable && (
            <p className="mt-2 text-center text-sm text-gray-500 dark:text-gray-400">
              You need to mark yourself as available to submit
            </p>
          )}
        </form>
        
        {/* Conditional rendering for Upcoming Deliveries Section */}
        {formSubmitted && (
          <div className="space-y-8">
            {/* Upcoming Deliveries Section */}
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm p-6">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-6">
                Your Upcoming Deliveries
              </h2>
              
              <div className="bg-gray-50 dark:bg-gray-700 rounded-lg p-4 border-l-4 border-green-500">
                <div className="flex justify-between items-start">
                  <div>
                    <h3 className="text-lg font-medium text-gray-900 dark:text-white">
                      New Delivery Assignment
                    </h3>
                    <p className="text-sm text-gray-500 dark:text-gray-400 mt-1">
                      Order #{upcomingDelivery.id}
                    </p>
                  </div>
                  <span className="bg-green-100 text-green-800 text-xs font-medium px-2.5 py-0.5 rounded-full dark:bg-green-900 dark:text-green-300">
                    Assigned
                  </span>
                </div>
                
                <div className="mt-4 grid grid-cols-1 md:grid-cols-2 gap-4">
                  <div className="flex items-start space-x-3">
                    <div className="flex-shrink-0 bg-green-100 dark:bg-green-900/30 p-2 rounded-full">
                      <MapPin className="h-5 w-5 text-green-600 dark:text-green-400" />
                    </div>
                    <div>
                      <p className="text-xs font-medium text-gray-500 dark:text-gray-400">Pickup Location</p>
                      <p className="text-sm font-medium text-gray-900 dark:text-white">{upcomingDelivery.pickup}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-start space-x-3">
                    <div className="flex-shrink-0 bg-green-100 dark:bg-green-900/30 p-2 rounded-full">
                      <MapPin className="h-5 w-5 text-green-600 dark:text-green-400" />
                    </div>
                    <div>
                      <p className="text-xs font-medium text-gray-500 dark:text-gray-400">Dropoff Location</p>
                      <p className="text-sm font-medium text-gray-900 dark:text-white">{upcomingDelivery.dropoff}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-start space-x-3">
                    <div className="flex-shrink-0 bg-green-100 dark:bg-green-900/30 p-2 rounded-full">
                      <Navigation className="h-5 w-5 text-green-600 dark:text-green-400" />
                    </div>
                    <div>
                      <p className="text-xs font-medium text-gray-500 dark:text-gray-400">Distance</p>
                      <p className="text-sm font-medium text-gray-900 dark:text-white">{upcomingDelivery.distance}</p>
                    </div>
                  </div>
                  
                  <div className="flex items-start space-x-3">
                    <div className="flex-shrink-0 bg-green-100 dark:bg-green-900/30 p-2 rounded-full">
                      <Clock className="h-5 w-5 text-green-600 dark:text-green-400" />
                    </div>
                    <div>
                      <p className="text-xs font-medium text-gray-500 dark:text-gray-400">Estimated Time</p>
                      <p className="text-sm font-medium text-gray-900 dark:text-white">{upcomingDelivery.estimatedTime}</p>
                    </div>
                  </div>
                </div>
                
                <div className="mt-6 flex items-center justify-end">
                  <button className="inline-flex items-center px-4 py-2 bg-green-600 hover:bg-green-700 text-white text-sm font-medium rounded-lg transition-colors">
                    Start Navigation <ArrowRight className="ml-2 h-4 w-4" />
                  </button>
                </div>
              </div>
            </div>
            
            {/* Google Maps Section */}
            <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm p-6 mb-8">
              <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-6">
                Delivery Route
              </h2>
              
              {/* Mock Google Maps - This is a placeholder */}
              <div className="relative w-full h-96 bg-gray-200 dark:bg-gray-700 rounded-lg overflow-hidden">
                {/* Map background with subtle grid */}
                <div className="absolute inset-0 bg-gray-200 dark:bg-gray-700 opacity-75" 
                    style={{ 
                        backgroundImage: 'linear-gradient(to right, rgba(156, 163, 175, 0.1) 1px, transparent 1px), linear-gradient(to bottom, rgba(156, 163, 175, 0.1) 1px, transparent 1px)',
                        backgroundSize: '20px 20px' 
                    }}>
                </div>
                
                {/* Main roads */}
                <div className="absolute top-1/2 left-0 right-0 h-2 bg-gray-300 dark:bg-gray-600 transform -translate-y-1/2"></div>
                <div className="absolute top-0 bottom-0 left-1/4 w-2 bg-gray-300 dark:bg-gray-600 transform -translate-x-1/2"></div>
                <div className="absolute top-0 bottom-0 left-3/4 w-2 bg-gray-300 dark:bg-gray-600 transform -translate-x-1/2"></div>
                
                {/* Route line */}
                <div className="absolute" style={{ top: '25%', left: '25%', width: '50%', height: '50%' }}>
                  <svg width="100%" height="100%" viewBox="0 0 100 100" xmlns="http://www.w3.org/2000/svg">
                    <path 
                      d="M0,50 C20,20 80,80 100,50" 
                      stroke="#10b981" 
                      strokeWidth="4" 
                      fill="none" 
                      strokeDasharray="6,3"
                      strokeLinecap="round"
                    />
                  </svg>
                </div>
                
                {/* Start marker - Whitefield */}
                <div className="absolute top-1/4 left-1/4 transform -translate-x-1/2 -translate-y-1/2 z-10" title="Whitefield">
                  <div className="relative">
                    <div className="absolute -top-12 -left-16 bg-white dark:bg-gray-800 text-gray-900 dark:text-white px-2 py-1 rounded shadow-md text-xs whitespace-nowrap">
                      Whitefield (Pickup)
                    </div>
                    <div className="h-6 w-6 bg-green-500 rounded-full flex items-center justify-center border-2 border-white dark:border-gray-800">
                      <MapPin className="h-4 w-4 text-white" />
                    </div>
                  </div>
                </div>
                
                {/* End marker - Nagarbhavi */}
                <div className="absolute top-3/4 left-3/4 transform -translate-x-1/2 -translate-y-1/2 z-10" title="Nagarbhavi">
                  <div className="relative">
                    <div className="absolute -top-12 -left-16 bg-white dark:bg-gray-800 text-gray-900 dark:text-white px-2 py-1 rounded shadow-md text-xs whitespace-nowrap">
                      Nagarbhavi (Dropoff)
                    </div>
                    <div className="h-6 w-6 bg-red-500 rounded-full flex items-center justify-center border-2 border-white dark:border-gray-800">
                      <MapPin className="h-4 w-4 text-white" />
                    </div>
                  </div>
                </div>
                
                {/* Mock controls */}
                <div className="absolute top-4 right-4 flex flex-col space-y-2">
                  <button className="w-8 h-8 bg-white dark:bg-gray-800 rounded-full shadow-md flex items-center justify-center text-gray-700 dark:text-white">+</button>
                  <button className="w-8 h-8 bg-white dark:bg-gray-800 rounded-full shadow-md flex items-center justify-center text-gray-700 dark:text-white">-</button>
                </div>
                
                {/* Google Maps attribution mockup */}
                <div className="absolute bottom-2 left-2 text-xs text-gray-600 dark:text-gray-400">
                  Map data ©2023
                </div>
              </div>
              
              <div className="mt-4 flex justify-between">
                <div className="flex space-x-4">
                  <div className="flex items-center">
                    <div className="h-3 w-3 bg-green-500 rounded-full mr-2"></div>
                    <span className="text-sm text-gray-600 dark:text-gray-400">Starting Point</span>
                  </div>
                  <div className="flex items-center">
                    <div className="h-3 w-3 bg-red-500 rounded-full mr-2"></div>
                    <span className="text-sm text-gray-600 dark:text-gray-400">Destination</span>
                  </div>
                </div>
                <div className="text-sm text-gray-600 dark:text-gray-400">
                  Total Distance: ~18.5 km
                </div>
              </div>
            </div>
          </div>
        )}
        
        {/* Empty state when no form has been submitted */}
        {!formSubmitted && (
          <div className="bg-white dark:bg-gray-800 rounded-xl shadow-sm p-6">
            <h2 className="text-xl font-semibold text-gray-900 dark:text-white mb-6">
              Your Upcoming Deliveries
            </h2>
            
            <div className="text-center py-12">
              <Clock className="h-12 w-12 mx-auto text-gray-400 mb-4" />
              <h3 className="text-lg font-medium text-gray-700 dark:text-gray-300 mb-2">No Active Deliveries</h3>
              <p className="text-gray-500 dark:text-gray-400 max-w-md mx-auto">
                You don't have any scheduled deliveries yet. Update your availability and location above to get started.
              </p>
            </div>
          </div>
        )}
      </main>
      
      {/* Notification Popup */}
      <AnimatePresence>
        {showNotification && (
          <motion.div
            initial={{ opacity: 0, y: 50 }}
            animate={{ opacity: 1, y: 0 }}
            exit={{ opacity: 0, y: 50 }}
            className="fixed bottom-4 right-4 bg-white dark:bg-gray-800 rounded-lg shadow-lg p-4 max-w-sm z-50 border-l-4 border-green-500"
          >
            <div className="flex">
              <div className="flex-shrink-0">
                <Bell className="h-6 w-6 text-green-500" />
              </div>
              <div className="ml-3">
                <h3 className="text-sm font-medium text-gray-900 dark:text-white">
                  Availability Updated!
                </h3>
                <div className="mt-1 text-sm text-gray-500 dark:text-gray-400">
                  We'll notify you when there's a food delivery request matching your location. Thank you for volunteering!
                </div>
                <div className="mt-2 flex">
                  <button
                    type="button"
                    onClick={() => setShowNotification(false)}
                    className="text-sm font-medium text-green-600 hover:text-green-500 dark:text-green-400 dark:hover:text-green-300"
                  >
                    Dismiss
                  </button>
                </div>
              </div>
            </div>
          </motion.div>
        )}
      </AnimatePresence>
    </div>
  );
};

export default VolunteerDashboard; 